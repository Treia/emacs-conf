#+TITLE: MY EMACS CONFIG
#+AUTHOR: MARC PLANELLES
#+PROPERTY: header-args :tangle yes

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:
** Table of Contents :TOC_4_GH:
- [[#configuration][Configuration]]
  - [[#about-this-file][About this file]]
  - [[#variables][Variables]]
    - [[#directories][Directories]]
    - [[#hooks][Hooks]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#initialization-settings][Initialization Settings]]
    - [[#initialize-and-add-package-sources][Initialize and Add Package Sources]]
  - [[#general-configuration][General Configuration]]
    - [[#utf-8][UTF-8]]
    - [[#generated-files][Generated files]]
    - [[#ui][UI]]
    - [[#font][Font]]
    - [[#editor][Editor]]
    - [[#mac-specifics][Mac specifics]]
  - [[#packages][Packages]]
    - [[#completion][Completion]]
      - [[#company][Company]]
      - [[#ivy][Ivy]]
    - [[#features][Features]]
      - [[#42-header][42 Header]]
      - [[#delight][Delight]]
      - [[#evil][Evil]]
      - [[#fringe-helper][Fringe-helper]]
      - [[#syntax-checker][Syntax-checker]]
      - [[#version-control][Version control]]
      - [[#workspaces][Workspaces]]
    - [[#keybindings][Keybindings]]
      - [[#general][General]]
      - [[#hydra][Hydra]]
      - [[#which-key][Which-key]]
    - [[#languages][Languages]]
      - [[#cc-mode][CC-mode]]
      - [[#fish][Fish]]
      - [[#markdown][Markdown]]
    - [[#navigation][Navigation]]
      - [[#ace-window][Ace-window]]
      - [[#avy][Avy]]
      - [[#ibuffer][Ibuffer]]
      - [[#dumb-jump][Dumb-jump]]
      - [[#projectile][Projectile]]
      - [[#recentf][Recentf]]
    - [[#org-mode][Org-Mode]]
      - [[#org-bullets][Org-bullets]]
      - [[#org-mode-1][Org-mode]]
      - [[#syndicate][Syndicate]]
      - [[#toc-org][toc-org]]
    - [[#tools][Tools]]
      - [[#dired][Dired]]
      - [[#make][Make]]
      - [[#neotree][Neotree]]
      - [[#rgb][RGB]]
      - [[#term][Term]]
    - [[#ui-1][UI]]
      - [[#all-the-icons][All-the-icons]]
      - [[#doom-themes][Doom-themes]]
      - [[#hl-line][hl-line]]
      - [[#hl-todo][hl-todo]]
      - [[#nav-flash][Nav-flash]]
      - [[#nlinum-relative][Nlinum-relative]]
      - [[#powerline][Powerline]]
      - [[#rainbow-delimiters][Rainbow-delimiters]]
      - [[#solaire-mode][Solaire-mode]]
      - [[#vi-tilde-fringe][vi-tilde-fringe]]
      - [[#whitespace-mode][Whitespace-mode]]
  - [[#functions][Functions]]
    - [[#buffers][Buffers]]
    - [[#files][Files]]
    - [[#indentation][Indentation]]
    - [[#windows][Windows]]
  - [[#keybindings-1][Keybindings]]
  - [[#post-init][Post-init]]
    - [[#run-post-init-hook][Run post init hook]]
    - [[#custom-faces][Custom faces]]
    - [[#adjust-fringe][Adjust fringe]]

** About this file
This is my personal Emacs configuration. A lot of the credit goes to [[https://github.com/hlissner][hlissner]] and his great doom-emacs config. I would use doom myself as it is much better integrated but I feel like I'm learning a lot more about emacs and lisp by doing my own configuration.
** Variables
*** Directories
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (defvar my/emacs-dir (file-truename user-emacs-directory)
    "The path to this emacs.d directory")
    (defvar my/cache-dir (concat my/emacs-dir "cache/")
    "Directory for volatile storage")
    (defvar my/packages-dir (concat my/emacs-dir "packages/")
    "This is where package.el and QUELPA packages are kept")

    ;; Create the directories
    (dolist (dir (list my/cache-dir (expand-file-name "elpa" my/packages-dir)))
      (unless (file-directory-p dir)
      (make-directory dir t))))
#+END_SRC
*** Hooks
#+BEGIN_SRC emacs-lisp
  (defvar my/init-hook nil
    "A list of hooks run during initialization")
  (defvar my/post-init-hook nil
    "A list of hooks run after initialization and after my/init-hook")
#+END_SRC

** Emacs Initialization
*** Initialization Settings
Modifying garbage collector threshold during startup to decrease load time. Resetting it after with a hook to avoid freezes.
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6))

  (add-hook 'my/post-init-hook #'(lambda () (setq gc-cons-threshold 16777216
                                                  gc-cons-percentage 0.1)))
#+END_SRC

*** Initialize and Add Package Sources
Let's keep all packages in the package-dir.
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq package-user-dir (expand-file-name "elpa" my/packages-dir)))
#+END_SRC

Let use-package take care of the package initialization.
#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer noninteractive
        package--init-file-ensured t
        package-enable-at-startup nil)
#+END_SRC

Set load path so we don't have to call package-initialize at runtime.
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

Add archives to package.el and initialize and ensure use-package is installed.
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                             ("gnu"       . "http://elpa.gnu.org/packages/")
                             ("melpa"     . "https://melpa.org/packages/")))

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure nil
          use-package-verbose t))
#+END_SRC

Setting up quelpa
#+BEGIN_SRC emacs-lisp
(use-package quelpa
  :ensure t
  :init
  (setq quelpa-update-melpa-p nil
        quelpa-checkout-melpa-p nil
        quelpa-melpa-recipe-stores nil
        quelpa-self-upgrade nil
        quelpa-dir (expand-file-name "quelpa" my/packages-dir))
  :config
  (package-initialize))
(use-package quelpa-use-package
  :ensure t)
#+END_SRC

** General Configuration
*** UTF-8
UTF-8 everywhere
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (set-language-environment 'utf-8)
  (setq locale-coding-system   'utf-8)
  (prefer-coding-system        'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+END_SRC

*** Generated files
No backups and autosaves or lockfiles, we use git instead
#+BEGIN_SRC emacs-lisp
(setq-default auto-save-default nil
              make-backup-files nil
              create-lockfiles nil)
(setq auto-save-list-file-prefix nil) ; Prevent the creation of auto-list-list directory
#+END_SRC

History
#+BEGIN_SRC emacs-lisp
  (setq savehist-file (concat my/cache-dir "savehist")
        history-length 500
        savehist-save-minibuffer-history t
        savehist-autosave-interval 150
        save-place-file (concat my/cache-dir "saveplace"))

  (savehist-mode)
  (save-place-mode)
#+END_SRC

We don't want customisation in our init.el
#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

Save abbreviations in local
#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-file-name (concat my/cache-dir "abbrev.el"))
#+END_SRC

*** UI
Disable a lot of annoying/space-taking UI stuff
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (blink-cursor-mode 0)
  (scroll-bar-mode 0)
  (tooltip-mode 0)
#+END_SRC

Replace yes or no by y or n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p) ; no more typing out y.e.s.
#+END_SRC

Some options
#+BEGIN_SRC emacs-lisp
  (setq-default
   cursor-in-non-selected-windows nil ; hide cursors in other windows
   mouse-yank-at-point t              ; middle-click paste at point, not at click
   use-dialog-box nil                 ; avoid GUI
   )
#+END_SRC

Disable startup-message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        initial-scratch-message "") ;Start emacs on a empty scratch buffer
#+END_SRC

*** Font
#+BEGIN_SRC emacs-lisp
  (set-frame-font "PragmataPro for Powerline-12")
#+END_SRC

*** Editor
Some options
#+BEGIN_SRC emacs-lisp
  (setq-default
   vc-follow-symlinks t
   fill-column 80
   word-wrap t
   sentence-end-double-space nil
   scroll-preserve-screen-position t
   require-final-newline t)

  (show-paren-mode)
#+END_SRC

Indentation settings
#+BEGIN_SRC emacs-lisp
  (setq-default
   indent-tabs-mode nil
   tab-always-indent t
   tab-width 4
   tab-stop-list (number-sequence 4 200 4))
#+END_SRC

Remove trailing whitespaces on save. Do not remove trailing lines
#+BEGIN_SRC emacs-lisp
  (setq delete-trailing-lines nil)
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Windows placement history with ~C-c <Left>~ and ~C-c <Right>~
#+BEGIN_SRC emacs-lisp
  (winner-mode)
#+END_SRC

*** Mac specifics
#+BEGIN_SRC emacs-lisp
  (setq IS-LINUX (eq system-type 'gnu/linux)
        IS-MAC (eq system-type 'darwin))
  (if IS-MAC
    (setq mac-command-modifier 'meta
          mac-option-modifier  'alt
          ;; sane trackpad/mouse scroll settings
          mac-redisplay-dont-reset-vscroll t
          mac-mouse-wheel-smooth-scroll nil
          mouse-wheel-scroll-amount '(5 ((shift) . 2))  ; one line at a time
          mouse-wheel-progressive-speed nil             ; don't accelerate scrolling
          ;; Curse Lion and its sudden but inevitable fullscreen mode!
          ;; NOTE Meaningless to railwaycat's emacs-mac build
          ns-use-native-fullscreen nil
          ;; Don't open files from the workspace in a new frame
          ns-pop-up-frames nil)

    (cond ((display-graphic-p)
           ;; A known problem with GUI Emacs on MacOS: it runs in an isolated
           ;; environment, so envvars will be wrong. That includes the PATH
           ;; Emacs picks up. `exec-path-from-shell' fixes this. This is slow
           ;; and benefits greatly from compilation.
           (setq exec-path
                 (or (eval-when-compile
                       (when (require 'exec-path-from-shell nil t)
                         (setq exec-path-from-shell-check-startup-files nil
                               exec-path-from-shell-arguments (delete "-i" exec-path-from-shell-arguments))
                         (nconc exec-path-from-shell-variables '("GOPATH" "GOROOT" "PYTHONPATH"))
                         (exec-path-from-shell-initialize)
                         exec-path))
                     exec-path)))
          (t
           (when (require 'osx-clipboard nil t)
             (osx-clipboard-mode +1)))))
#+END_SRC
** Packages
*** Completion
**** Company
***** Company
Company with YouCompleteMe behavior
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :commands (company-mode global-company-mode company-complete
  company-complete-common company-manual-begin company-grab-line)
    :delight
    :init
    (setq company-idle-delay 0.1
          company-tooltip-limit 15
          company-minimum-prefix-length 2
          company-dabbrev-downcase nil
          company-dabbrev-ignore-case nil
          company-dabbrev-code-other-buffers t)
    :config
    (add-hook 'my/post-init-hook 'global-company-mode)
    (add-hook 'evil-insert-state-exit-hook 'company-abort)
    (setq company-backends
        '((company-files
            company-keywords
            company-capf
            company-clang
            company-gtags
            )
          (company-abbrev company-dabbrev)))
    (require 'company-tng) ; This is needed for some reason for company-tng-configure-default
    (company-tng-configure-default))
#+END_SRC
***** Company-c-headers
#+BEGIN_SRC emacs-lisp
(use-package company-c-headers
    :ensure t
    :after company
    :config
    (add-to-list 'company-backends 'company-c-headers)
    (setq company-c-headers-path-user '("." ".." "../include" "../includes" "../../include" "../../includes" "../../../include" "../../../includes" "./include" "./includes" "./libft/include" "./libft/includes" "../libft/include" "../libft/includes" "../../libft/include" "../../libft/includes" "../../../libft/include" "../../../libft/includes"))
    )
#+END_SRC
***** Company-quickhelp
Shows documentation in the tooltip
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :after pos-tip
    :init
    (set-face-attribute 'tooltip nil :background "#303030" :foreground "#c6c6c6")
    :config
    (setq company-quickhelp-delay nil)
    (company-quickhelp-mode))
#+END_SRC

pos-tip is a company-quickhelp dependancy and flycheck-postip
#+BEGIN_SRC emacs-lisp
  (use-package pos-tip
    :ensure t)
#+END_SRC

***** Company-statistics
Keep company completion statistics to improve sorting
#+BEGIN_SRC emacs-lisp
  (use-package company-statistics
    :ensure t
    :after company
    :delight
    :config
    (setq company-statistics-file (concat my/cache-dir "company-stats-cache.el"))
    (company-statistics-mode))
#+END_SRC

**** Ivy
***** Ivy
Ivy, the generic completion frontend
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :demand t
    :delight
    :init
    (add-hook 'my/post-init-hook #'ivy-mode)
    :config
    (setq ivy-use-virtual-buffers t
            ivy-count-format "%d/%d "
            ivy-display-style 'fancy
            ivy-height 12
            ivy-wrap t
            ivy-fixed-height-minibuffer t
            projectile-completion-system 'ivy
            ivy-initial-inputs-alist nil
            ivy-format-function #'ivy-format-function-line)
    (eval-after-load "ivy"
        `(progn
            (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit))))
#+END_SRC

***** Counsel
Counsel, collection of Ivy-enhanced versions of common Emacs commands
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :demand t
    :config
    (require 'counsel-projectile)
    (setq counsel-find-file-at-point t))
#+END_SRC

Counsel-projectile provides more integration of counsel into projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t)
#+END_SRC

***** Swiper
Swiper, an alternative to isearch making use of ivy
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :commands (swiper swiper-all)
    :delight)
#+END_SRC

***** Smex
Improved M-X
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :commands (smex smex-major-mode-commands)
    :config
    (setq smex-save-file (concat my/cache-dir "/smex-items"))
    (smex-initialize))
#+END_SRC

***** ☞ TODO Add Ivy-hydra
*** Features
**** 42 Header
Inserts the header for 42 school
#+BEGIN_SRC emacs-lisp
  (use-package header
    :load-path "./packages/local/42header/"
    :config
    (add-hook 'before-save-hook 'header-update))
#+END_SRC

**** Delight
Used by use-package to hide or rename modes
#+BEGIN_SRC emacs-lisp
  (use-package delight
     :ensure t)
#+END_SRC
**** Evil
***** Evil
Install evil and activate evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :demand t
    :init
    (setq evil-want-integration nil
          evil-move-cursor-back nil
          evil-want-C-i-jump nil)
    :config
  ;; --- evil hacks -------------------------
    (defvar +evil-esc-hook '(t)
      "A hook run after ESC is pressed in normal mode (invoked by
  `evil-force-normal-state'). If any hook returns non-nil, all hooks after it are
  ignored.")

    (defun +evil*attach-escape-hook ()
      "Run the `+evil-esc-hook'."
      (cond ((minibuffer-window-active-p (minibuffer-window)) ;; quit the minibuffer if open.
             (abort-recursive-edit))
            ((evil-ex-hl-active-p 'evil-ex-search)
             ;; disable ex search buffer highlights.
             (evil-ex-nohighlight))
            (t
             ;; Run all escape hooks. If any returns non-nil, then stop there.
             (run-hook-with-args-until-success '+evil-esc-hook))))
    (advice-add #'evil-force-normal-state :after #'+evil*attach-escape-hook)

    (defun +evil*restore-normal-state-on-windmove (orig-fn &rest args)
      "If in anything but normal or motion mode when moving to another window,
  restore normal mode. This prevents insert state from bleeding into other modes
  across windows."
      (unless (memq evil-state '(normal motion emacs))
        (evil-normal-state +1))
      (apply orig-fn args))
    (advice-add #'windmove-do-window-select :around #'+evil*restore-normal-state-on-windmove)

    (evil-mode))
#+END_SRC

Also installing undo-tree, required by evil
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :demand t
    :delight
    :init
    (setq undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t
          undo-tree-history-directory-alist
          (list (cons "." (concat my/cache-dir "undo-tree-hist/"))))
    :config
    (global-undo-tree-mode)
    )
#+END_SRC

Make it so shifting the indent of visual selection (with > and <) does not lose selection from [[https://github.com/djoyner/dotfiles/blob/888a1f0d5cdd9a15a0bfe93a96cdd1fc5d7f2d57/emacs/lisp/evil-config.el#L36-L40][djoyner]]
#+BEGIN_SRC emacs-lisp
(defun djoyner/evil-shift-left-visual ()
  (interactive)
  (evil-shift-left (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))

(defun djoyner/evil-shift-right-visual ()
  (interactive)
  (evil-shift-right (region-beginning) (region-end))
  (evil-normal-state)
  (evil-visual-restore))
#+END_SRC

These are bound to < > tab and S-tab in [[Keybindings]]
***** Evil-args
Motions and text objects for delimited arguments in Evil, using 'a'
#+BEGIN_SRC emacs-lisp
  (use-package evil-args
    :ensure t
    :after evil
    :commands (evil-inner-arg evil-outer-arg
                      evil-forward-arg evil-backward-arg
                      evil-jump-out-args))
#+END_SRC

***** Evil-escape
Use key-sequence to escape from everything
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :ensure t
    :commands evil-escape-mode
    :delight
    :init
    (setq evil-escape-excluded-states '(normal visual multiedit emacs motion)
          evil-escape-excluded-major-modes '(neotree-mode)
          evil-escape-key-sequence "jk"
          evil-escape-delay 0.25)
    :config
    ;; no `evil-escape' in minibuffer
    (push #'minibufferp evil-escape-inhibit-functions)
    (add-hook 'my/post-init-hook #'evil-escape-mode))
#+END_SRC
***** Evil-goggles
#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :ensure t
    :commands evil-goggles-mode
    :init
    (setq evil-goggles-duration 0.2)
    (add-hook 'my/post-init-hook #'evil-goggles-mode t))

  (defun +evil-goggles/toggle ()
    "Toggle evil goggles mode."
    (interactive)
    (if evil-goggles-mode
        (evil-goggles-mode -1)
      (evil-goggles-mode +1)))
#+END_SRC
***** Evil-matchit
Evil-matchit allows to jump to a matched tag with %
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
      :ensure t
      :after evil
      :config
      (global-evil-matchit-mode 1))
#+END_SRC

***** Evil-nerd-commenter
Port of nerd commenter from vim, allows quick and easy commenting of lines or paragraphs
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :commands
    (evilnc-comment-or-uncomment-lines
        evilnc-comment-or-uncomment-paragraphs))
#+END_SRC

***** Evil-surround
Evil-surround, port of vim-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
      :ensure t
      :after evil
      :config
      (global-evil-surround-mode 1))
#+END_SRC

Evil-visualstar (* and # to search selection forward/backward)
#+BEGIN_SRC emacs-lisp
  (use-package evil-visualstar
      :ensure t
      :after evil
      :config
      (global-evil-visualstar-mode 1))
#+END_SRC

***** Evil-textobj-anyblock
Treat code blocks as text object using 'b'
#+BEGIN_SRC emacs-lisp
  (use-package evil-textobj-anyblock
    :ensure t
    :commands (evil-textobj-anyblock-inner-block evil-textobj-anyblock-a-block))
#+END_SRC

***** Evil-visualstar
Allows to search forward/backward with */#
#+BEGIN_SRC emacs-lisp
  (use-package evil-visualstar
    :ensure t
    :after evil
    :config
    (global-evil-visualstar-mode)
    )
#+END_SRC
**** Fringe-helper
Allows easier change of the fringe bitmaps
#+BEGIN_SRC emacs-lisp
  (use-package fringe-helper
    :ensure t
    :init
    (unless (fboundp 'define-fringe-bitmap)
      ;; doesn't exist in terminal Emacs; define it to prevent errors
      (defun define-fringe-bitmap (&rest _))))
#+END_SRC

**** Syntax-checker
Using flycheck to check syntax
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :demand t
    :delight
    :config
    (setq flycheck-clang-args "-Wall -Wextra -Werror"
          flycheck-indication-mode 'right-fringe ;; because we already use git-gutter in the fringe
          flycheck-check-syntax-automatically '(save mode-enabled)) ;; show errors on save
    (global-flycheck-mode)
    (fringe-helper-define 'flycheck-fringe-bitmap-double-arrow 'center
    "...X...."
    "..XX...."
    ".XXX...."
    "XXXX...."
    ".XXX...."
    "..XX...."
    "...X....")

    (with-eval-after-load 'evil
      ;; Flycheck buffer closes on ESC in normal mode, this is from DOOM
      (defun +syntax-checkers|flycheck-buffer ()
        (when flycheck-mode
          (ignore-errors (flycheck-buffer)) nil))
      (add-hook '+evil-esc-hook #'+syntax-checkers|flycheck-buffer t)))
#+END_SRC

Flycheck-pos-tip offers flycheck error in a popup
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-pos-tip
    :ensure t
    :after flycheck
    :config
    (setq flycheck-pos-tip-timeout 10
          flycheck-display-errors-delay 0.5)
    (flycheck-pos-tip-mode))
#+END_SRC

***** ☞ TODO When Emacs 26 comes out might have to get rid of it
**** Version control
***** Evil-magit
Better evil integration with evil-magit
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :ensure t
    :after magit)
#+END_SRC

***** Gitconfig-mode/Gitignore-mode
Additional modes for gitconfig and gitignore files
#+BEGIN_SRC emacs-lisp
  (use-package gitconfig-mode
    :ensure t
    :mode "/\\.?git/?config$"
    :mode "/\\.gitmodules$")

  (use-package gitignore-mode
    :ensure t
    :mode "/\\.gitignore$")
#+END_SRC

***** Git-gutter-fringe
Show diff in fringe
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :ensure t
    :delight
    :config
    ;; Update git-gutter on focus (in case I was using git externally)
    (add-hook 'focus-in-hook #'git-gutter:update-all-windows)

    (with-eval-after-load 'evil
        (defun +version-control|update-git-gutter ()
        "Refresh git-gutter on ESC. Return nil to prevent shadowing other
    `+evil-esc-hook' hooks."
        (when git-gutter-mode
            (ignore (git-gutter))))
        (add-hook '+evil-esc-hook #'+version-control|update-git-gutter t))
    ;; Putting git gutter outside margins
    (setq-default fringes-outside-margins t)
    (fringe-helper-define 'git-gutter-fr:added '(center repeated)
        "XXX.....")
    (fringe-helper-define 'git-gutter-fr:modified '(center repeated)
        "XXX.....")
    (fringe-helper-define 'git-gutter-fr:deleted 'bottom
        "X......."
        "XX......"
        "XXX....."
        "XXXX....")
    (global-git-gutter-mode))
#+END_SRC

***** Git-timemachine
Browse versions of a file
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :commands (git-timemachine git-timemachine-toggle)
    :config
    (require 'magit-blame)

    ;; Force evil to rehash keybindings for the current state
    (add-hook 'git-timemachine-mode-hook #'evil-force-normal-state))
#+END_SRC
***** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status magit-blame magit-log-buffer-file magit-file-popup magit-log-all))
#+END_SRC

**** Workspaces
Using persp so that we can create isolated workspaces, each with their own windows and buffers
#+BEGIN_SRC emacs-lisp
(use-package persp-mode
  :ensure t
  :demand t
  :config
  (setq wg-morph-on nil
        persp-autokill-buffer-on-remove 'kill-weak
        persp-auto-save-fname "autosave"
        persp-nil-name "nil"
        persp-nil-hidden t
        persp-auto-resume-time 1.0
        persp-auto-save-opt 1
        persp-save-dir (concat my/cache-dir "workspaces/"))
  (add-hook 'my/post-init-hook #'(lambda () (persp-mode 1)))

  (defvar +workspaces-last-persp nil
    "A variable that contains the last accessed perspective")
  (defun +workspaces*track-last-persp (switch-fun &rest args)
      (let ((before-persp (safe-persp-name (get-current-persp)))
            (after-persp (apply switch-fun args)))
        (when (not (string= before-persp after-persp))
          (setq +workspaces-last-persp before-persp))))
  (advice-add #'persp-switch :around #'+workspaces*track-last-persp)

  (defun +workspace-switch-last ()
    "Switches to the last workspace"
    (interactive)
    (if (+workspace-exists-p +workspaces-last-persp)
      (persp-switch +workspaces-last-persp)
      (error "No previous workspace.")))

  (defun +workspace-exists-p (name)
    "Returns t if NAME is the name of an existing workspace."
    (when (symbolp name)
      (setq name (symbol-name name)))
    (unless (stringp name)
      (error "Expected a string, got a %s" (type-of name)))
      (member name (persp-names-current-frame-fast-ordered)))

  (defun +workspace-switch-project (arg)
    (interactive "P")
    (ivy-read "Switch to Project Perspective: "
              (if (projectile-project-p)
                  (cons (abbreviate-file-name (projectile-project-root))
                        (projectile-relevant-known-projects))
                projectile-known-projects)
              :action (lambda (project)
                        (let ((persp-reset-windows-on-nil-window-conf t))
                          (persp-switch project)
                          (let ((projectile-completion-system 'ivy))
                            (projectile-switch-project-by-name project)))))))
#+END_SRC

*** Keybindings
**** General
Use general to set up keybindings
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t)
#+END_SRC
**** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :demand t)
#+END_SRC
**** Which-key
Show keypress options
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :demand t
    :delight
    :init
    (setq which-key-idle-delay 0.1
          which-key-add-column-padding 1
          enable-recursive-minibuffers t)
    :config
    (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold)
    (which-key-mode 1)
    (which-key-setup-side-window-bottom))
#+END_SRC
*** Languages
**** CC-mode
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :commands (c-mode c++-mode objc-mode java-mode)
    :init
    (setq c-basic-offset 4
          c-default-style "linux"
          c-backspace-function 'backward-delete-char))
#+END_SRC

**** Fish
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
    :ensure t
    :commands (fish-mode)
    :delight fish-mode "Fish"
    :mode
    ("\\.fish\\'"))
#+END_SRC

**** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode)
    :delight markdown-mode "Markdown"
    :mode
    ("INSTALL\\'"
    "CONTRIBUTORS\\'"
    "LICENSE\\'"
    "README\\'"
    "\\.markdown\\'"
    "\\.md\\'"))
#+END_SRC
*** Navigation
**** Ace-window
Ace window to quickly jump between windows
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (setq aw-dispatch-always t
          aw-swap-invert t)
    :config
    (set-face-attribute 'aw-leading-char-face nil :foreground "deep sky blue" :weight 'bold :height 3.0))
#+END_SRC

**** Avy
Navigate around visible text
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :commands
    (avy-goto-word-1
    avy-goto-word-or-subword-1
    avy-goto-char-in-line
    avy-goto-line))
#+END_SRC

**** Ibuffer
Advanced buffer menu
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :init
    (setq ibuffer-use-header-line t
          ibuffer-use-other-window t)
    (add-hook 'ibuffer-mode-hook (lambda () (ibuffer-auto-mode 1))))
#+END_SRC

Grouped by project
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
    :ensure t
    :init
    (add-hook 'ibuffer-hook
    (lambda ()
        (ibuffer-vc-set-filter-groups-by-vc-root)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC
**** Dumb-jump
Use dumb-jump to jump to definition
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :commands (dumb-jump-go dumb-jump-quick-look dumb-jump-go-other-window
               dumb-jump-back dumb-jump-result-follow)
    :config
    (setq dumb-jump-default-project my/emacs-dir
          dumb-jump-aggressive nil
          dumb-jump-use-visible-window nil
          dumb-jump-selector 'ivy))
#+END_SRC

***** ☞ TODO Add hydra for dumb-jump from [[https://github.com/jacktasia/dumb-jump][the github]]
***** ☞ TODO Maybe add ivy-xref
**** Projectile
Move around a project
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :demand t
    :delight
    :init
    (setq projectile-completion-system 'ivy
          projectile-switch-project-action 'projectile-find-file
          projectile-require-project-root t
          projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o" ".class")
          projectile-enable-caching t
          projectile-cache-file (concat my/cache-dir "projectile.cache")
          projectile-known-projects-file (concat my/cache-dir "projectile.projects")
          projectile-globally-ignored-files '(".DS_Store" "Icon" "TAGS"))
    (add-hook 'my/post-init-hook #'projectile-mode))
#+END_SRC

**** Recentf
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :config
    (setq recentf-save-file (concat my/cache-dir "recentf")
          recentf-max-menu-items 0
          recentf-max-saved-items 300)
    (recentf-mode))
#+END_SRC
*** Org-Mode
**** Org-bullets
Prettier bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook
    (org-mode . org-bullets-mode)
    :init
    (setq org-bullets-bullet-list '("◉" "◎" "⚫" "○" "►" "◇")))
#+END_SRC
**** Org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :commands (org-mode
                org-agenda-list
                org-capture
                org-store-link
                org-agenda)
    :mode (("\\.org\\'" . org-mode)
        ("*Org Agenda*" . org-agenda-mode))
    :init
    (add-hook 'my/post-init-hook #'doom-themes-org-config)
    (setq org-directory "~/org"
          org-default-notes-file (concat org-directory "/notes.org")
          org-agenda-start-on-weekday 1
          org-todo-keywords '((sequence "☞ TODO(t)" "☛ NEXT(n)" "⚑ WAITING(w@)" "|" "✔ DONE(d!)" "✘ CANCELED(c@)"))
          org-hide-leading-stars t
          org-hide-leading-stars-before-indent-mode t
          org-return-follows-link t
          org-startup-folded t
          org-startup-indented t
          org-startup-truncated nil)
    ;; Babel settings
    (setq org-src-fontify-natively t
          org-src-preserve-indentation t
          org-src-tab-acts-natively t
          org-src-window-setup 'current-window)

    (defun +my/open-organizer ()
      "Open the default organizer"
      (interactive)
      (find-file (concat org-directory "/organizer.org")))
    (with-eval-after-load 'doom-themes
      (doom-themes-org-config)))

#+END_SRC
**** Syndicate
Evil keybindings for org
#+BEGIN_SRC emacs-lisp
  (use-package syndicate
    :ensure t
    :after org
    :delight)
#+END_SRC
**** toc-org
Table of content in org-mode
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :ensure t
    :after org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook #'toc-org-enable)
    )
#+END_SRC
*** Tools
**** Dired
***** Dired
Modify some dired settings
#+BEGIN_SRC emacs-lisp
  (setq dired-auto-revert-buffer t
        auto-revert-verbose nil
        dired-recursive-copies 'always
        dired-recursive-deletes 'tops)

  (defun +dired|sort-directories-first ()
    "List directories first in dired buffers."
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2) ;; beyond dir. header
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max))))
    (and (featurep 'xemacs)
         (fboundp 'dired-insert-set-properties)
         (dired-insert-set-properties (point-min) (point-max)))
    (set-buffer-modified-p nil))
  (add-hook 'dired-after-readin-hook #'+dired|sort-directories-first)

  ;; Automatically create missing directories when creating new files
  (defun +dired|create-non-existent-directory ()
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
        (make-directory parent-directory t))))
  (push #'+dired|create-non-existent-directory find-file-not-found-functions)
#+END_SRC

***** Dired-subtree
Add subtrees to dired
#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :ensure t
    :after dired)
#+END_SRC

***** Dired-k
Better highlighting in dired buffers
#+BEGIN_SRC emacs-lisp
  (use-package dired-k
    :ensure t
    :after dired
    :config
    (setq dired-k-style 'git)

    (defun +dired*dired-k-highlight (orig-fn &rest args)
      "Butt out if the requested directory is remote (i.e. through tramp)."
      (unless (file-remote-p default-directory)
        (apply orig-fn args)))
    (advice-add #'dired-k--highlight :around #'+dired*dired-k-highlight)

    (add-hook 'dired-initial-position-hook #'dired-k)
    (add-hook 'dired-after-readin-hook #'dired-k-no-revert))
#+END_SRC

**** Make
Install make-executor
#+BEGIN_SRC emacs-lisp
  (use-package makefile-executor
    :ensure t)
#+END_SRC

Function to run make on current project
#+BEGIN_SRC emacs-lisp
  (defun +make/run ()
    "Run a make task in the current project."
    (interactive)
    (require 'makefile-executor)
    (let* ((buffer-file (or buffer-file-name default-directory))
           (makefile-dir (locate-dominating-file buffer-file "Makefile")))
      (unless makefile-dir
        (user-error "No makefile found in this project."))
      (let ((default-directory makefile-dir))
        (makefile-executor-execute-target
  (expand-file-name "Makefile")))))
#+END_SRC

**** Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :commands (neotree neotree-show neotree-toggle
                       neotree-dir neotree-find)
    :config
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-hidden-regexp-list
          '(;; vcs folders
            "^\\.\\(git\\|hg\\|svn\\)$"
            ;; compiled files
            "\\.\\(pyc\\|o\\|elc\\|lock\\|css.map\\)$"
            ;; generated files, caches or local pkgs
            "^\\(node_modules\\|vendor\\|.\\(project\\|cask\\|yardoc\\|sass-cache\\)\\)$"
            ;; org-mode folders
            "^\\.\\(sync\\|export\\|attach\\)$"
            "~$"
            "^#.*#$"))
    (doom-themes-neotree-config)
    (add-hook '+evil-esc-hook #'neotree-hide)

    ;; Winner ignores neotree
    (when (bound-and-true-p winner-mode)
      (push neo-buffer-name winner-boring-buffers)))
#+END_SRC

**** RGB
***** Rainbow-mode
Show colors on color values in the buffer
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :commands rainbow-mode
    :init
    (add-hook 'css-mode #'rainbow-mode)
    (add-hook 'sass-mode #'rainbow-mode))
#+END_SRC

***** Kurecolor
Change color values under cursor
#+BEGIN_SRC emacs-lisp
  (use-package kurecolor
    :ensure t
    :after rainbow-mode
    :config
    (defhydra hydra-kurecolor (:color pink :hint nil)
      "
  Inc/Dec      _w_/_W_ brightness      _d_/_D_ saturation      _e_/_E_ hue    "
      ("w" kurecolor-decrease-brightness-by-step)
      ("W" kurecolor-increase-brightness-by-step)
      ("d" kurecolor-decrease-saturation-by-step)
      ("D" kurecolor-increase-saturation-by-step)
      ("e" kurecolor-decrease-hue-by-step)
      ("E" kurecolor-increase-hue-by-step)
      ("q" nil "cancel" :color blue)))
#+END_SRC

**** Term
Install multi-term
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :ensure t
    :commands (multi-term multi-term-next multi-term-prev)
    :config
    (setq multi-term-program (getenv "SHELL")
          multi-term-switch-after-close 'PREVIOUS))
#+END_SRC

*** UI
**** All-the-icons
Pretty icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :commands (all-the-icons-octicon all-the-icons-faicon all-the-icons-fileicon
               all-the-icons-wicon all-the-icons-material all-the-icons-alltheicon
               all-the-icons-install-fonts)
    :init
    (defun disable-all-the-icons-in-tty (orig-fn &rest args)
      (when (display-graphic-p)
        (apply orig-fn args)))

    ;; all-the-icons doesn't work in the terminal, so we "disable" it.
    (advice-add #'all-the-icons-octicon    :around #'disable-all-the-icons-in-tty)
    (advice-add #'all-the-icons-material   :around #'disable-all-the-icons-in-tty)
    (advice-add #'all-the-icons-faicon     :around #'disable-all-the-icons-in-tty)
    (advice-add #'all-the-icons-fileicon   :around #'disable-all-the-icons-in-tty)
    (advice-add #'all-the-icons-wicon      :around #'disable-all-the-icons-in-tty)
    (advice-add #'all-the-icons-alltheicon :around #'disable-all-the-icons-in-tty))
#+END_SRC

**** Doom-themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t))
#+END_SRC

**** hl-line
#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :ensure t
  :config
  (global-hl-line-mode))
#+END_SRC
**** hl-todo
Highlight todos in comments
#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :ensure t
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-keyword-faces
          `(("TODO"  . ,(face-foreground 'warning))
            ("FIXME" . ,(face-foreground 'error))
            ("NOTE" . ,(face-foreground 'success)))))
#+END_SRC
**** Nav-flash
Used to highlight current cursor line
#+BEGIN_SRC emacs-lisp
  (use-package nav-flash
    :ensure t
    :commands nav-flash-show
    :init
    (defun my/blink-cursor (&rest _)
      "Blink current line using `nav-flash'."
      (interactive)
      (unless (minibufferp)
        (nav-flash-show)
        ;; only show in the current window
      (overlay-put compilation-highlight-overlay 'window (selected-window))))
    (with-eval-after-load 'evil
      (advice-add #'evil--jumps-jump   :after #'my/blink-cursor)
      (advice-add #'evil-window-top    :after #'my/blink-cursor)
      (advice-add #'evil-window-middle :after #'my/blink-cursor)
      (advice-add #'evil-window-bottom :after #'my/blink-cursor)))
#+END_SRC
**** Nlinum-relative
Show line numbers
#+BEGIN_SRC emacs-lisp
  (use-package nlinum-relative
    :ensure t
    :hook
    (prog-mode . nlinum-relative-mode)
    :config
    (setq nlinum-relative-current-symbol "")
    (nlinum-relative-setup-evil))
#+END_SRC

**** Powerline
***** Powerline
Better and prettier modeline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :config
    (powerline-center-evil-theme)
    (setq powerline-default-separator nil
          powerline-height 30))
#+END_SRC

***** Airline-themes
An even prettier modeline
#+BEGIN_SRC emacs-lisp
  (use-package airline-themes
    :quelpa (airline-themes :fetcher github :repo "Treia/airline-themes")
    :after powerline
    :config
    (setq airline-shortened-directory-length 20
          airline-utf-glyph-linenumber #xe0a1
          airline-utf-glyph-readonly #xe0a2
          airline-utf-glyph-branch #xe0a0
          airline-minor-modes nil))
    (load-theme 'airline-doom-one t)
#+END_SRC

**** Rainbow-delimiters
Highlight delimiters with colors by depth
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :commands rainbow-delimiters-mode
  :config
  (setq rainbow-delimiters-max-face-count 3)
  :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
**** Solaire-mode
Change buffer color
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :ensure t
    :after doom-themes
    :hook
    (after-change-major-mode . turn-on-solaire-mode)
    :config
    (solaire-mode-swap-bg))
#+END_SRC
**** vi-tilde-fringe
Show ~ in front of empty lines like in vi
#+BEGIN_SRC emacs-lisp
  (use-package vi-tilde-fringe
    :ensure t
    :commands vi-tilde-fringe-mode
    :hook (my/post-init-hook . global-vi-tilde-fringe-mode))
#+END_SRC

**** Whitespace-mode
Show tabs
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :delight
    :hook
    (prog-mode . whitespace-mode)
    :config
    (setq whitespace-style '(face tabs tab-mark)))
#+END_SRC
k
** Functions
Again credit goes to hlissner and his doom emacs config for these
*** Buffers
#+BEGIN_SRC emacs-lisp
  (defun my/kill-buffer-and-windows (buffer)
    "Kill the buffer and delete all the windows it's displayed in."
    (dolist (window (get-buffer-window-list buffer))
      (unless (one-window-p t)
        (delete-window window)))
    (kill-buffer buffer))

  (defun my/kill-other-buffers (&optional persp-p)
  "Kill all other buffers (besides the current one).
    If PROJECT-P (universal argument), kill only buffers that belong to the current
    project."
  (interactive "P")
  (let ((buffers (if persp-p (persp-buffer-list) (buffer-list)))
        (current-buffer (current-buffer)))
    (dolist (buf buffers)
      (unless (eq buf current-buffer)
        (my/kill-buffer-and-windows buf)))
    (when (called-interactively-p 'interactive)
      (message "Killed %s buffers" (length buffers)))))
#+END_SRC
*** Files
#+BEGIN_SRC emacs-lisp
(defun my/sudo-find-file (file)
  "Open a file as root."
  (interactive
   (list (read-file-name "Open as root: ")))
  (find-file (if (file-writable-p file)
                 file
               (concat "/sudo:root@localhost:" file))))

(defun my/sudo-this-file ()
  "Open the current file as root."
  (interactive)
  (my/sudo-find-file (file-truename buffer-file-name)))
#+END_SRC
*** Indentation
#+BEGIN_SRC emacs-lisp
  (defun my/42-setup ()
    "When working on 42 projects I need specific indentation settings"
    (interactive)
    (setq indent-tabs-mode t
          c-tab-always-indent real))

  (defun my/reset-indentation ()
    "Go back to using spaces"
    (interactive)
    (setq indent-tabs-mode nil
          c-tab-always-indent t))
#+END_SRC
*** Windows
#+BEGIN_SRC emacs-lisp
  (defun my/window-zoom ()
    "Maximize and isolate the current buffer. Activate again to undo this. If the
  window changes before then, the undo expires."
    (interactive)
    (if (and (one-window-p)
             (assoc ?_ register-alist))
        (jump-to-register ?_)
      (window-configuration-to-register ?_)
      (delete-other-windows)))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key "M-x" 'counsel-M-x)
  (general-define-key
   :states '(normal visual insert emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"

   ;; a ;;
   "a"            'ace-window
   ;; b ;;
   "b"            '(:ignore t :which-key "Buffers")
   "ba"           '(mark-whole-buffer :which-key "Select whole buffer")
   "bb"           '(counsel-projectile-switch-to-buffer :which-key "Switch workspace buffer")
   "bB"           '(ivy-switch-buffer :which-key "Switch buffer")
   "bd"           '(kill-this-buffer :which-key "Kill buffer")
   "bD"           '(lambda () (interactive) (my/kill-other-buffers) t :which-key "Kill other buffers")
   "bi"           '(ibuffer :which-key "Open ibuffer")
   "bk"           '(kill-buffer :which-key "Kill a buffer")
   "bn"           '(evil-buffer-new :which-key "New empty buffer")

   ;; c ;;
   "c"            '(:ignore t :which-key "Comment")
   "cb"           '(comment-box :which-key "Box")
   "cc"           '(evilnc-comment-or-uncomment-lines :which-key "Line")
   "cl"           '(comments-insert-bar :which-key "Bar")
   "cp"           '(evilnc-comment-or-uncomment-paragraphs :which-key "Paragraph")

   ;; d ;;
   "d"            '(:ignore t :which-key "Describe")
   "db"           '(counsel-descbinds :which-key "Binds")
   "df"           '(counsel-describe-function :which-key "Function")
   "dv"           '(counsel-describe-variable :which-key "Variable")

   ;; f ;;
   "f"            '(:ignore t :which-key "Files")
   "fa"           '(counsel-ag :which-key "Ag search")
   "fE"           '(my/sudo-edit :which-key "Sudo current file")
   "fF"           '(my/sudo-find-file :which-key "Find file with sudo")
   "ff"           '(counsel-find-file :which-key "Find file")
   "fg"           '(counsel-git :which-key "Git ff")
   "fp"           '(counsel-git-grep :which-key "Git grep")
   "fr"           '(counsel-recentf :which-key "Recent files")
   "fs"           '(save-buffer :which-key "Save buffer")
   "fS"           '(evil-write-all :which-key "Save all buffers")
   "ft"           '(neotree-toggle :which-key "Neotree")
   "fz"           '(counsel-fzf :which-key "Fzf")

   ;; g ;;
   "g"            '(:ignore t :which-key "Git")
   "gb"           '(magit-blame :which-key "Git blame")
   "gf"           '(magit-file-popup :which-key "Git log current file")
   "gl"           '(magit-log-all :which-key "Git log all")
   "gs"           '(magit-status :which-key "Git status")
   "gt"           '(git-timemachine :which-key "Git time machine")

   ;; j ;;
   "j"            '(:ignore t :which-key "Jump to")
   "jt"           '(avy-goto-word-1 :which-key "Word")
   "jl"           '(avy-goto-line :which-key "Line")
   "jo"           '(avy-org-goto-heading-timer :whick-key "Org heading")

   ;; h ;;
   "h"            '(header-insert :which-key "42header")

   ;; l ;;
   "l"            '(:ignore t :which-key "Workspaces")
   "ld"           '(persp-kill :which-key "Kill workspace")
   "lf"           '(persp-load-state-from-file :whick-key "Load workspace from file")
   "ll"           '(persp-switch :which-key "Switch to workspace")
   "ls"           '(persp-save-state-to-file :which-key "Save current workspace")
   "l TAB"        '(+workspace-switch-last :which-key "Switch to last workspace")

   ;; o ;;
   "o"            '(:ignore t :which-key "Org")
   "oa"           '(org-agenda :which-key "Agenda")
   "oc"           '(org-capture :which-key "Capture")
   "ol"           '(org-store-link :which-key "Store-link")
   "oo"           '(+my/open-organizer :which-key "Organizer")

   ;; p ;;
   "p"            '(:ignore t :which-key "Project")
   "pc"           '(projectile-invalidate-cache :which-key "Invalidate cache")
   "pi"           '(projectile-ibuffer :which-key "Project Ibuffer")
   "pf"           '(counsel-projectile-find-file :which-key "Find file in project")
   "pk"           '(projectile-kill-buffers :which-key "Kill project buffers")
   "pl"           '(+workspace-switch-project :which-key "Switch project workspace")
   "pp"           '(counsel-projectile-switch-project :which-key "Switch project")
   "pr"           '(projectile-recentf :which-key "Project recent files")
   "p!"           '(projectile-run-command-in-root :which-key "Run command at project root")

   ;; s ;;
   "s"            'swiper

   ;; w ;;
   "w"            '(:ignore t :which-key "Windows")
   "wa"           '(ace-window :which-key "Ace-window")
   "wd"           '(delete-window :which-key "Delete current window")
   "wH"           '(evil-window-move-far-left :which-key "Move window left")
   "wh"           '(evil-window-left :which-key "Window left")
   "wJ"           '(evil-window-move-far-down :which-key "Move window down")
   "wj"           '(evil-window-down :which-key "Window down")
   "wK"           '(evil-window-move-far-up :which-key "Move window up")
   "wk"           '(evil-window-up :which-key "Window up")
   "wL"           '(evil-window-move-far-right :which-key "Move window right")
   "wl"           '(evil-window-right :which-key "Window right")
   "ws"           '(ace-swap-window :which-key "Ace swap window")
   "wu"           '(winner-undo :which-key "Winner undo")
   "wU"           '(winner-redo :which-key "Winner redo")
   "ww"           '(hydra-window/body :which-key "Manage windows")
   "wz"           '(my/window-zoom :which-key "Window zoom")
   "w/"           '(split-window-right :which-key "Split window vertically")
   "w-"           '(split-window-below :which-key "Split window horizontal")
   "w="           '(balance-windows :which-key "Balance windows")

   ;; special ;;
   "SPC"          '(my/blink-cursor :which-key "Blink cursor line")
   "/"            '(counsel-projectile-rg :which-key "Search in project")
   "?"            '(counsel-rg :which-key "Search from here")
   "*"            '(counsel-projectile-rg-region-or-symbol :which-key "Search selection in project")
   ";"            '(eval-expression :which-key "Eval expr"))

  ;; motion states binds ;;
  (general-define-key
   :states '(motion)
   "/"            'swiper
   "C-r"          'undo-tree-redo)

  ;; visual states binds ;;
  (general-define-key
   :states '(visual)
   ;; Fix > and <
   ">"            'djoyner/evil-shift-right-visual
   "<"            'djoyner/evil-shift-left-visual
   "TAB"          'djoyner/evil-shift-right-visual
   "<backtab>"    'djoyner/evil-shift-left-visual
   ;; move selection
   "J"            (concat ":m '>+1" (kbd "RET") "gv=gv")
   "K"            (concat ":m '<-2" (kbd "RET") "gv=gv"))

  ;; Mode-specific keybindings ;;

  ;; C-mode ;;
  (general-define-key
   :states '(insert)
   :keymaps 'c-mode-base-map
   "TAB"          'tab-to-tab-stop)

  ;; Dired keybindings ;;
  (general-define-key
   :states '(emacs normal)
   :keymaps 'dired-mode-map
   "RET"          'dired-find-file
   "TAB"          'dired-subtree-toggle
   "<backtab>"    'dired-subtree-cycle
   "/"            'swiper
   "B"            'dired-do-bytecompile
   "C"            'dired-do-copy
   "d"            'dired-flag-file-deletion
   "D"            'dired-do-delete
   "F"            'find-name-dired
   "gg"           'evil-goto-first-line
   "G"            'evil-goto-line
   "h"            'left-char
   "j"            'dired-next-line
   "k"            'dired-previous-line
   "l"            'right-char
   "L"            'dired-do-load
   "m"            'dired-mark
   "O"            'dired-omit-mode
   "q"            'quit-window
   "R"            'dired-do-rename
   "T"            'dired-do-touch
   "t"            'dired-toggle-marks
   "u"            'dired-unmark
   "U"            'dired-unmark-all-files
   "x"            'dired-do-flagged-delete
   "+"            'dired-create-directory)

  ;; Flycheck
  (general-define-key
   :states '(emacs normal)
   :keymaps 'flycheck-error-list-mode-map
   "C-n"          'flycheck-error-list-next-error
   "C-p"          'flycheck-error-list-previous-error
   "j"            'flycheck-error-list-next-error
   "k"            'flycheck-error-list-previous-error
   "RET"          'flycheck-error-list-goto-error)

  ;; Ibuffer ;;
  (general-define-key
   :states '(emacs)
   :keymaps 'ibuffer-mode-map
   "/"            'swiper)

  ;; Ivy (occur) keybindings ;;
  (general-define-key
   :states '(normal)
   :keymaps 'ivy-occur-mode-map
   "RET"          'ivy-occur-press-and-switch
   "g"            nil
   "ga"           'ivy-occur-read-action
   "gc"           'ivy-occur-toggle-calling
   "gg"           'evil-goto-first-line
   "gf"           'ivy-occur-press
   "h"            'evil-backward-char
   "j"            'ivy-occur-next-line
   "k"            'ivy-occur-previous-line
   "l"            'evil-forward-char
   "q"            'quit-window)

  (general-define-key
   :states '(normal)
   :keymaps 'neotree-mode-map
   "TAB"          'neotree-quick-look
   "RET"          'neotree-enter
   "c"            'neotree-create-node
   "d"            'neotree-delete-node
   "g"            nil
   "G"            'evil-goto-line
   "gg"           'evil-goto-first-line
   "j"            'neotree-next-line
   "k"            'neotree-previous-line
   "q"            'neotree-hide
   "R"            'neotree-refresh
   "r"            'neotree-rename-node
   "s"            'neotree-enter-horizontal-split
   "v"            'neotree-enter-vertical-split)

  ;; Undo-tree ;;
  (general-define-key
   :states '(motion)
   :keymaps 'undo-tree-visualizer-mode-map
   "h"            'undo-tree-visualize-left
   "j"            'undo-tree-visualize-redo
   "k"            'undo-tree-visualize-undo
   "l"            'undo-tree-visualize-right)

  ;; Hydras ;; NEED TO REDO THESE

  ;; Window ;;
  (defhydra hydra-window (:hint nil)
        "
              Split: _v_ert  _s_:horz
             Delete: _c_lose  _o_nly
      Switch Window: _h_:left  _j_:down  _k_:up  _l_:right
            Buffers: _p_revious  _n_ext  _b_:select  _f_ind-file  _F_projectile
             Winner: _u_ndo  _r_edo
             Resize: _H_:splitter left  _J_:splitter down  _K_:splitter up  _L_:splitter right
               Move: _a_:up  _z_:down  _i_menu"


          ("z" scroll-up-line)
          ("a" scroll-down-line)
          ("i" idomenu)

          ("u" winner-undo)
          ("r" winner-redo)

          ("h" windmove-left)
          ("j" windmove-down)
          ("k" windmove-up)
          ("l" windmove-right)

          ("p" previous-buffer)
          ("n" next-buffer)
          ("b" ido-switch-buffer)
          ("f" ido-find-file)
          ("F" projectile-find-file)

          ("s" split-window-below)
          ("v" split-window-right)

          ("c" delete-window)
          ("o" delete-other-windows)

          ("H" hydra-move-splitter-left)
          ("J" hydra-move-splitter-down)
          ("K" hydra-move-splitter-up)
          ("L" hydra-move-splitter-right)

          ("q" nil))
#+END_SRC

** Post-init
*** Run post init hook
#+BEGIN_SRC emacs-lisp
(run-hooks 'my/post-init-hook)
#+END_SRC
*** Custom faces
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces
    'doom-one
    `(org-level-1 ((t (:height 1.0 :weight bold   :slant normal :foreground "#aa88ff" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))))
    `(org-level-2 ((t (:height 1.0 :weight bold   :slant normal :foreground "#88aaff" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))))
    `(org-level-3 ((t (:height 1.0 :weight normal :slant normal :foreground "#88ffff" :underline nil)))) ;; cyan
    `(org-level-4 ((t (:height 1.0 :weight normal :slant normal :foreground "#66ffaa" :underline nil)))) ;; sea-green
    `(org-level-5 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffff66" :underline nil)))) ;; yellow
    `(org-level-6 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffaa00" :underline nil)))) ;; orange
    `(org-level-7 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff6666" :underline nil)))) ;; red
    `(org-level-8 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff66aa" :underline nil)))) ;; pink
    `(avy-lead-face ((t (:foreground "#ffaf00"))))
    `(avy-lead-face-0 ((t (:foreground "#5fd7ff"))))
    `(avy-lead-face-1 ((t (:foreground "#66ffaa"))))
    `(avy-lead-face-2 ((t (:foreground "#ff6666"))))
    `(dired-subtree-depth-1-face ((t (:background "#23272e"))))
    `(dired-subtree-depth-2-face ((t (:background "#363d47"))))
    `(dired-subtree-depth-3-face ((t (:background "#4a5261"))))
    `(dired-subtree-depth-4-face ((t (:background "#5d687a"))))
    `(dired-subtree-depth-5-face ((t (:background "#717d94"))))
    `(dired-subtree-depth-6-face ((t (:background "#8493ad"))))
    '(flyspell-duplicate ((t (:underline "yellow" :weight bold))))
    '(flyspell-incorrect ((t (:underline "yellow" :weight bold)))))
  (custom-set-faces
   '(evil-goggles-delete-face           ((t (:foreground "#ff6c6b"))))
   '(evil-goggles-paste-face            ((t (:foreground "#98be65"))))
   '(evil-goggles-yank-face             ((t (:foreground "#51afef"))))
   '(evil-goggles-undo-redo-remove-face ((t (:foreground "#ff6c6b"))))
   '(evil-goggles-undo-redo-add-face    ((t (:foreground "#98be65"))))
   '(evil-goggles-undo-redo-change-face ((t (:foreground "#51afef")))))
  (custom-set-faces
    '(diff-hl-change         ((t (:foreground "#ECBE7B"))))
    '(git-gutter-fr:modified ((t (:foreground "#ECBE7B")))))
  (custom-set-faces
    '(whitespace-tab ((t (:foregound "#23272e" :background nil)))))
#+END_SRC
*** Adjust fringe
#+BEGIN_SRC emacs-lisp
  (fringe-mode '(12 . 12))
#+END_SRC

